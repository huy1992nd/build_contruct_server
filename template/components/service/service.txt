
const ***table_u*** = require('../models').***table_u***;
const models = require('../models');
const Sequelize = require('sequelize');
const Op = Sequelize.Op;
const message = require('../utils/messages').message;
const statusCode = require('../utils/statusCode');
const httpStatus = require('../utils/httpStatus');
const Utils = require('../lib/tc-itech/common/utils/database.utils');
class ***table***Service {

    get***table_u***(where) {
        return  ***table_u***.find({
            where : where
        })
    }

    add***table_u***(input) {
        let ***table***_create = input ;
        return ***table_u***.create(***table***_create);
    }

    update***table_u***(input) {
            let id = input.id;
            let data_update = input ;
            return ***table_u***.update(
                data_update,
                { where: { id } }
            )
    }

    delete***table_u***(input) {
        if(input.hard_delete){
            return ***table_u***.destroy({
                where:{
                id: input.id
                }
            });
        }else{
            return ***table_u***.update({
            deleted: 1
            }, {
                where: {
                    id: input.id
                }
            });
        }
    }

    search***table_u***(condition) {
        let { page, limit, order, searches, filter } = condition;
        let where = {
        deleted: false,
        }; //for filtering deleted

        const andFilter = Utils.filterGenerator(filter);
        if (andFilter && andFilter.length) {
        where = {
            ...where,
            [Op.and]: andFilter
        };
        }

        const orSearch = Utils.searchGeneratorV2(searches);
        if (orSearch && orSearch.length) {
        where = {
            ...where,
            [Op.or]: orSearch
        };
        }

        return  ***table_u***.findAndCountAll({
            where,
            limit: limit,
            offset: limit ? limit * (page - 1) : undefined,
            order: order,
        })
    }

    validateGet(data, res) {
        let error = {
            status_code: 0,
            message: ""
        }
        //More content in hear ....
        if(error.status_code){
            res.json({
            code: error.status_code,
            message: error.message
            });
        }
        return error.status_code;
    }

    validateAdd(data, res) {
        let error = {
            status_code: 0,
            message: ""
        }
        //More content in hear ....
        if(error.status_code){
            res.json({
            code: error.status_code,
            message: error.message
            });
        }
        return error.status_code;
    }

    validateSearch(data, res) {
        let error = {
            status_code: 0,
            message: ""
        }
        //More content in hear ....
        if(error.status_code){
            res.json({
            code: error.status_code,
            message: error.message
            });
        }
        return error.status_code;
    }

    validateUpdate(data, res) {
        let error = {
            status_code: 0,
            message: ""
        }
        if (!data.id || typeof (data.id) == "undefined") {
            error.message = message.INCORRECT_DATA;
            error.status_code = statusCode.INCORRECT_DATA;
        }
        //More content in hear ....
        if(error.status_code){
            res.json({
                code: error.status_code,
                message: error.message
            });
        }
        return error.status_code;
    }

    validateDelete(data, res) {
        let error = {
            status_code: 0,
            message: ""
        }
        if (!data.id || typeof (data.id) == "undefined") {
            error.message = message.INCORRECT_DATA;
            error.status_code = statusCode.INCORRECT_DATA;
        }
        //More content in hear ....
        if(error.status_code){
            res.json({
                code: error.status_code,
                message: error.message
            });
        }
        return error.status_code;
    }

    checkDuplicate(name, id = null) {
        return new Promise((resolve, reject) => {
        try {
            let where = {
            name: name,
            deleted: 0
            }
            if (id) {
            where["id"] = {
                [Op.notIn]: [id]
            }
            }
            ***table_u***.findOne({
            where: where
            })
            .then(result => {
                if (result) {
                resolve(true);
                } else {
                resolve(false);
                }
            })
            .catch(err => {
                reject(err);
            });
        } catch (error) {
            reject(error);
        }
        })
    }
    checkMultilDuplicate(body, list_condition, id = null) {
        let or = [];
        list_condition.forEach(c => {
            let item_p = {};
            item_p[c] = body[c];
            or.push(item_p);
        })
        return new Promise((resolve, reject) => {
            try {
                let where = {
                    [Op.or]: or,
                    deleted: 0
                }
                if (id) {
                    where["id"] = {
                        [Op.notIn]: [id]
                    }
                }
                ***table_u***.findOne({
                    where: where
                })
                    .then(result => {
                        if (result) {
                            resolve(true);
                        } else {
                            resolve(false);
                        }
                    })
                    .catch(err => {
                        reject(err);
                    });
            } catch (error) {
                reject(error);
            }
        })
    }     
}

module.exports = new ***table***Service();